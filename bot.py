import os
import asyncio
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import logging
import re
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# HH API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
HH_API_URL = "https://api.hh.ru/vacancies"
HH_SEARCH_PARAMS = {
    "text": "–û–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–∞" or "call-—Ü–µ–Ω—Ç—Ä" or "–æ–ø–µ—Ä–∞—Ç–æ—Ä" or "–Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" or "—á–∞—Ç",
    "area": 113,
    "per_page": 99,
    "schedule": "remote",
    "experience": "noExperience",
}

# –õ–∏–º–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–π
VACANCY_LIMIT = 2000

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_daily_vacancies = {}  # –°–≤–æ–¥–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id: {company: count}}
user_sent_vacancies = {}  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id: set()}


def get_vacancies():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏–º–∏—Ç–∞ 2000 –≤–∞–∫–∞–Ω—Å–∏–π.
    """
    vacancies = []
    page = 0

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
    msk_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(msk_tz)
    HH_SEARCH_PARAMS.update({
        "date_from": now.replace(hour=0, minute=0, second=0, microsecond=0).isoformat(),
        "date_to": now.replace(hour=23, minute=59, second=59, microsecond=0).isoformat(),
    })

    while True:
        HH_SEARCH_PARAMS["page"] = page
        logger.info(f"–ó–∞–ø—Ä–æ—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {HH_SEARCH_PARAMS}")

        try:
            response = requests.get(HH_API_URL, params=HH_SEARCH_PARAMS, timeout=30)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break

        items = response.json().get("items", [])
        vacancies.extend(items)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1}.")
        if len(items) < 99 or len(vacancies) >= VACANCY_LIMIT:
            logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–ª–∏ –∫–æ–Ω–µ—Ü –≤–∞–∫–∞–Ω—Å–∏–π.")
            break

        page += 1

    return vacancies[:VACANCY_LIMIT]


def clean_text(text):
    """
    –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤.
    """
    return re.sub(r"<[^>]*>", "", text).strip() if text else ''


def format_vacancy(vacancy):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    name = vacancy.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    salary = vacancy.get('salary', {})
    salary_from = salary.get('from', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if salary else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    salary_to = salary.get('to', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if salary else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    area = vacancy.get('area', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    employer = vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    schedule = vacancy.get('schedule', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    snippet = vacancy.get('snippet', {})
    description = snippet.get('responsibility', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
    description = clean_text(description)

    return f"""üîπ *{name}*
üíº –ö–æ–º–ø–∞–Ω–∏—è: {employer}
üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: –æ—Ç {salary_from} –¥–æ {salary_to} —Ä—É–±.
üìç –ì–æ—Ä–æ–¥: {area}
üïí –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {schedule}
‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:
{description}
üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({vacancy.get('alternate_url', '#')})"""


async def send_message_with_retry(context, chat_id, message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ flood control.
    """
    while True:
        try:
            await context.bot.send_message(chat_id, message, parse_mode="Markdown")
            break
        except Exception as e:
            error_message = str(e)
            if "Flood control exceeded" in error_message:
                retry_after = int(error_message.split("Retry in")[1].strip().split()[0])
                logger.warning(f"Flood control triggered. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(retry_after + 1)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break


async def send_vacancies(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤ Telegram. –£—á–∏—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = context.job.chat_id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_sent_vacancies:
        user_sent_vacancies[chat_id] = set()
        user_daily_vacancies[chat_id] = {}

    try:
        vacancies = get_vacancies()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        unique_vacancies = [v for v in vacancies if v['id'] not in user_sent_vacancies[chat_id]]

        for vacancy in unique_vacancies:
            user_sent_vacancies[chat_id].add(vacancy['id'])  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            company = vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            user_daily_vacancies[chat_id][company] = user_daily_vacancies[chat_id].get(company, 0) + 1

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 5
        for i in range(0, len(unique_vacancies), 5):
            batch = unique_vacancies[i:i + 5]
            message = "\n\n".join(format_vacancy(vacancy) for vacancy in batch)
            await send_message_with_retry(context, chat_id, message)
            await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood control

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")


async def daily_summary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
    """
    chat_id = update.effective_chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in user_daily_vacancies:
        user_daily_vacancies[chat_id] = {}

    summary = "üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞):*\n\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∞–∫–∞–Ω—Å–∏–π
    sorted_vacancies = sorted(user_daily_vacancies[chat_id].items(), key=lambda item: item[1], reverse=True)

    if not sorted_vacancies:
        summary += "–°–µ–≥–æ–¥–Ω—è –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –±—ã–ª–æ."
    else:
        for company, count in sorted_vacancies:
            summary += f"üè¢ {company}: {count} –≤–∞–∫–∞–Ω—Å–∏–π\n"

    # –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    chunk_size = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è Markdown)
    summary_chunks = [summary[i:i + chunk_size] for i in range(0, len(summary), chunk_size)]

    try:
        for chunk in summary_chunks:
            await context.bot.send_message(chat_id, chunk, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    chat_id = update.effective_chat.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    reply_markup = ReplyKeyboardMarkup([["üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞"]], resize_keyboard=True)

    await update.message.reply_text(
        "üëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–∞–∫–∞–Ω—Å–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É.",
        reply_markup=reply_markup
    )

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    context.job_queue.run_repeating(send_vacancies, interval=600, first=10, chat_id=chat_id)


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
    """
    if update.message.text == "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞":
        await daily_summary_command(update, context)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button))

    application.run_polling()


if __name__ == "__main__":
    main()
